Main function
 - we define a function in Rust by entering fn followed by a function name and a set of parentheses. 
The curly brackets tell the compiler where the function body begins and ends.
 - fn main() {
      println!("Hello, world!");

      another_function();
  }

  fn another_function() {
      println!("Another function.");
  }

 - call any function we’ve defined by entering its name followed by a set of parentheses
Parameters
 - fn main() {
    another_function(5);
  }

  fn another_function(x: i32) {
      println!("The value of x is: {x}");
  } 
Statements and Expressions
 - Statements are instructions that perform some action and do not return a value.
 - Expressions evaluate to a resultant value.
Functions with return values
 - returns values asigned to them
 - rust doesn’t name return values, but we must declare their type after an arrow (->)
 - fn five() -> i32 {
        5
    }

    fn main() {
        let x = five();

        println!("The value of x is: {x}");
    }
 - in Rust, the return value of the function is synonymous with the value of the final expression in the block of the body of a function. 
    You can return early from a function by using the return keyword and specifying a value, but most functions return the last expression implicitly.
 