Integer type 
 - Signed and unsigned refer to whether itâ€™s possible for the number to be negativeâ€”in other words, whether the number 
 needs to have a sign with it (signed) or whether it will only ever be positive and can therefore be represented 
 without a sign (unsigned). 
 - Integer overflow -    variable of type u8 that can hold values between 0 and 255. 
 If you try to change the variable to a value outside that range, such as 256, integer overflow will occur
Floating-Point Types
 - Rustâ€™s floating-point types are f32 and f64, which are 32 bits and 64 bits in size
 - numeric operations: additions, subtraction, multiplication, division, remainder
Boolean Types
 - let f bool:true or false
Character Types
 - char
 - fn main() {
    let c = 'z';
    let z: char = 'â„¤'; // with explicit type annotation
    let heart_eyed_cat = 'ðŸ˜»';
}
Compound Types - Tuple and Array
Tuple Types
 - let tup: (i32, f64, u8) = (500, 6.4, 1);
 - destructuring: 
  fn main() {
    let tup = (500, 6.4, 1);

    let (x, y, z) = tup;

    println!("The value of y is: {y}");
  }
Array Types
 - let a = [1, 2, 3, 4, 5];
 - array typing: let a: [i32; 5] = [1, 2, 3, 4, 5];
 - multiple elements in one array: let a = [3; 5];
 - accessing index via 0 indexing: a[0];
 - !! runtime error if accessing index beyond array size