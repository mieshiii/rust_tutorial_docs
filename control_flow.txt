if expressions
 -  fn main() {
      let number = 3;

      if number < 5 {
          println!("condition was true");
      } else {
          println!("condition was false");
      }
  }
use multiple conditions by combining if and else in an else if expression
 - fn main() {
        let number = 6;

        if number % 4 == 0 {
            println!("number is divisible by 4");
        } else if number % 3 == 0 {
            println!("number is divisible by 3");
        } else if number % 2 == 0 {
            println!("number is divisible by 2");
        } else {
            println!("number is not divisible by 4, 3, or 2");
        }
    }
use if in a let statement
 - fn main() {
        let condition = true;
        let number = if condition { 5 } else { 6 };

        println!("The value of number is: {number}");
    }
 - values that have the potential to be results from each arm of the if must be the same type
 - this code causes an error:
    fn main() {
        let condition = true;

        let number = if condition { 5 } else { "six" };

        println!("The value of number is: {number}");
    }
repetition with loops
 - rust has 3 kinds of loops: loop, while, and for
 - using loop:
    - fn main() {
        loop {
            println!("again!");
        }
    }
 - can place the break keyword within the loop to tell the program to stop the loop
 - add the value you want returned after the break expression you use to stop the loop
    - fn main() {
        let mut counter = 0;

        let result = loop {
            counter += 1;

            if counter == 10 {
                break counter * 2;
            }
        };

        println!("The result is {result}");
    }
 - loops within loops, break and continue apply to the innermost loop at that point
 - you can optionally specify a loop label on a loop
 - that you can then use with break or continue to specify that those keywords apply to the labeled loop instead of the innermost loop
 - fn main() {
        let mut count = 0;
        'counting_up: loop {
            println!("count = {count}");
            let mut remaining = 10;

            loop {
                println!("remaining = {remaining}");
                if remaining == 9 {
                    break;
                }
                if count == 2 {
                    break 'counting_up;
                }
                remaining -= 1;
            }

            count += 1;
        }
        println!("End count = {count}");
    }
 - conditional loops with while:
 - fn main() {
        let mut number = 3;

        while number != 0 {
            println!("{number}!");

            number -= 1;
        }

        println!("LIFTOFF!!!");
    }
 - for loops:
 - fn main() {
        let a = [10, 20, 30, 40, 50];

        for element in a {
            println!("the value is: {element}");
        }
    }
 - for loops in reverse range:
 - fn main() {
        for number in (1..4).rev() {
            println!("{number}!");
        }
        println!("LIFTOFF!!!");
    }

